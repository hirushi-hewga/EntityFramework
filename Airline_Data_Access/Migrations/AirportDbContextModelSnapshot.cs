// <auto-generated />
using System;
using Airport_Data_Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airline_Data_Access.Migrations
{
    [DbContext(typeof(AirportDbContext))]
    partial class AirportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airport_Data_Access.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Password = "qwerty123",
                            Username = "Colosquid"
                        },
                        new
                        {
                            AccountId = 2,
                            Password = "qwerty321",
                            Username = "Sunada223"
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftId"));

                    b.Property<string>("AircraftModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AircraftTypeId")
                        .HasColumnType("int");

                    b.HasKey("AircraftId");

                    b.HasIndex("AircraftTypeId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            AircraftId = 1,
                            AircraftModel = "Boeing 737",
                            AircraftTypeId = 1
                        },
                        new
                        {
                            AircraftId = 2,
                            AircraftModel = "Boeing 777",
                            AircraftTypeId = 2
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.AircraftType", b =>
                {
                    b.Property<int>("AircraftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AircraftTypeId");

                    b.ToTable("AircraftTypes");

                    b.HasData(
                        new
                        {
                            AircraftTypeId = 1,
                            TypeName = "Narrow-body"
                        },
                        new
                        {
                            AircraftTypeId = 2,
                            TypeName = "Wide-body"
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Kyiv",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Lviv",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Warsaw",
                            CountryId = 2
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Berlin",
                            CountryId = 3
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Ukraine"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryName = "Germany"
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalCityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("ArrivalCityId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 2,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 3,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 4,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 5,
                            AircraftId = 1,
                            ArrivalCityId = 3,
                            FlightDate = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 6,
                            AircraftId = 2,
                            ArrivalCityId = 4,
                            FlightDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 7,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 8,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 9,
                            AircraftId = 1,
                            ArrivalCityId = 3,
                            FlightDate = new DateTime(2024, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 10,
                            AircraftId = 2,
                            ArrivalCityId = 4,
                            FlightDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 11,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 12,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 13,
                            AircraftId = 1,
                            ArrivalCityId = 3,
                            FlightDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 14,
                            AircraftId = 2,
                            ArrivalCityId = 4,
                            FlightDate = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 15,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 16,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 17,
                            AircraftId = 1,
                            ArrivalCityId = 3,
                            FlightDate = new DateTime(2024, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 18,
                            AircraftId = 2,
                            ArrivalCityId = 4,
                            FlightDate = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 19,
                            AircraftId = 1,
                            ArrivalCityId = 1,
                            FlightDate = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 20,
                            AircraftId = 2,
                            ArrivalCityId = 2,
                            FlightDate = new DateTime(2024, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 21,
                            AircraftId = 1,
                            ArrivalCityId = 3,
                            FlightDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FlightId = 22,
                            AircraftId = 2,
                            ArrivalCityId = 4,
                            FlightDate = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Aircraft", b =>
                {
                    b.HasOne("Airport_Data_Access.Entities.AircraftType", "AircraftType")
                        .WithMany("Aircrafts")
                        .HasForeignKey("AircraftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftType");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.City", b =>
                {
                    b.HasOne("Airport_Data_Access.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Flight", b =>
                {
                    b.HasOne("Airport_Data_Access.Entities.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airport_Data_Access.Entities.City", "ArrivalCity")
                        .WithMany("Flights")
                        .HasForeignKey("ArrivalCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("ArrivalCity");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Aircraft", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.AircraftType", b =>
                {
                    b.Navigation("Aircrafts");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.City", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Airport_Data_Access.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
